@page "/Graphs"
@using ChartJs.Blazor.LineChart
@using ChartJs.Blazor.BarChart
@using AplikacjaSmartGrid.Graphs.Model;
@using AplikacjaSmartGrid.Graphs.Services;
@using System.Drawing
@inject NavigationManager NavManager
@inject AppState AppState

<PageTitle>Strona Główna</PageTitle>
<div class="d-flex justify-content-center"><h1>Smart Grid App</h1></div>


<div class="row">
    <div class="col-sm justify-content-center">
    <Chart Config="_config" @ref="_chart"></Chart>
            <div class="col text-center">
    <button @onclick="RedirectToUseOfEnergySite">Szczegółowe informacje o zużyciu energii elektrycznej</button>
    </div>
    </div>

    <div class="col-sm justify-content-center">
    <Chart Config="_config2" @ref="_chart2"></Chart>
            <div class="col text-center">
    <button @onclick="RedirectToEnergyProductionSite">Szczegółowe informacje o produkcji energii elektrycznej z paneli fotowoltaicznych</button>
    </div>
    </div>

    <div class="col-sm justify-content-center">
    <Chart Config="_config3" @ref="_chart3"></Chart>
            <div class="col text-center">
    <button @onclick="RedirectToWindAndOthersEnergyProductionSite">Szczegółowe informacje o produkcji energii elektrycznej z elektrowni wiatrowych</button>
    </div>
    </div>
</div>

<div class="row">
    <div class="col-sm justify-content-center">
            <Chart Config="_config4" @ref="_chart4"></Chart>
            <div class="col text-center">
            <button @onclick="RedirectToEnergyBalance">Sprawdź szczegółowy balans energii</button>
            </div>
    </div>

    <div class="col-sm justify-content-center">
       <Chart Config="_config5" @ref="_chart5"></Chart>

        <div class="col text-center">
        <button @onclick="RedirectToEnergyBalanceEV">Sprawdź szczegółowy dzienny balans energii z autami elektrycznymi</button>
        </div>
    </div>
</div>

@code {
    private const int InitalCount = 7;
    private LineConfig _config;
    private Chart _chart;
    private LineConfig _config2;
    private Chart _chart2;
    private LineConfig _config3;
    private Chart _chart3;
    private LineConfig _config4;
    private Chart _chart4;
    private LineConfig _config5;
    private Chart _chart5;

    ImportCSVService importCSVService = new ImportCSVService();

    protected override void OnInitialized()
    {
        List<UserUsageModel> userUsageModel = importCSVService.ReturnList(false, true, AppState.UsageOfEnergyList);
        List<SolarProductionDataModel> solarProductionModel = importCSVService.ReturnListSolar(true, false, AppState.ProductionOfSolarEnergy);
        List<WindProductionDataModel> windProductionModel = importCSVService.ReturnListWind(true, false, AppState.ProductionOfWindEnergy, AppState.InstalledPower);
        List<EnergyBalanceModel> energyBalanceModel = new List<EnergyBalanceModel>();
        List<String> ppes = new List<String>();
        List<string> time = new List<string>();
        List<string> timeTrimmed = new List<string>();
        GetDatasetService getDatasetService = new GetDatasetService();
        CalculateEnergyBalanceService calculateEnergyBalanceService = new CalculateEnergyBalanceService();

        List<UserUsageModel> userUsageModelForEnergyBalance = importCSVService.ReturnList(true, false, AppState.UsageOfEnergyList);
        CalculateEnergyBalanceService calculateEnergyBalance = new CalculateEnergyBalanceService();
        List<SolarProductionDataModel> solarProductionModelForEnergyBalance = importCSVService.ReturnListSolar(false, false, AppState.ProductionOfSolarEnergy);
        List<WindProductionDataModel> windProductionModelForEnergyBalance = importCSVService.ReturnListWind(false, false, AppState.ProductionOfWindEnergy, AppState.InstalledPower);

        var energyBalance = calculateEnergyBalance.CalculatedEnergyBalanceModelBeforeBattery(solarProductionModel, windProductionModel, userUsageModel);
        var energyBalanceBefore = calculateEnergyBalance.CalculatedEnergyBalanceModelBeforeBattery(solarProductionModelForEnergyBalance, windProductionModelForEnergyBalance, userUsageModelForEnergyBalance);

        _config = LineConfigPreparation("Dzienne zużycie energii elektrycznej", "Dni", "kWh");

        _config2 = LineConfigPreparation("Produkcja energii elektrycznej z energii słonecznej", "Dni", "kWh");

        _config3 = LineConfigPreparation("Produkcja energii elektrycznej z energii wiatrowej", "Dni", "kWh");

        _config4 = LineConfigPreparation("Bilans Końcowy Energii bez aut elektrycznych", "Dni", "kWh");

        _config5 = LineConfigPreparationEnergyBalance("Bilans Końcowy Energii z autami elektrycznych", "Dni", "kWh");

        ppes = getDatasetService.GetAllClients(userUsageModel);
        time = getDatasetService.GetAxisX(userUsageModel, ppes[0]);  

        foreach (string partOfTime in time)
        {
            int indexOf = partOfTime.IndexOf(' ');
            string newString = string.Empty;
            newString = partOfTime.Substring(0, indexOf);
            timeTrimmed.Add(newString);
        }

        EVService eVService = new EVService();
        var eVList = eVService.getEVListFromCSV(AppState.CarListAtTheGrid);

        EVEnergyBalanceService EVservice = new EVEnergyBalanceService(eVList, energyBalanceBefore, AppState.UsageOfEVCarsDaily, AppState.HowMuchEnergyCanEVLoadFromGridForAMinute, AppState.HowMuchEnergyCanEVDonateToGridForAMinute);
        var listOfEnergyBalanceAfterEVs = EVservice.GetEVEnergyBalance();

        LineDataset<double> actualUserUsage = new LineDataset<double>();
        actualUserUsage = getDatasetService.GetAllDataset(userUsageModel);
        actualUserUsage.Label = "Wszyscy klienci";
        _config.Data.Datasets.Add(actualUserUsage);
        _config.Data.Labels.AddRange(timeTrimmed);

        var solarProduction = getDatasetService.GetOnlySolarProductionDataset(solarProductionModel);
        solarProduction.Label = "Wszyscy klienci";
        _config2.Data.Labels.AddRange(timeTrimmed);
        _config2.Data.Datasets.Add(solarProduction);

        var windProduction = getDatasetService.GetOnlyWindProductionDataset(windProductionModel);
        windProduction.Label = "Wszyscy klienci";
        _config3.Data.Labels.AddRange(timeTrimmed);
        _config3.Data.Datasets.Add(windProduction);

        energyBalanceModel = calculateEnergyBalanceService.CalculatedEnergyBalanceModelBeforeBattery(solarProductionModel, windProductionModel, userUsageModel);
        var energyBalanceDataset = getDatasetService.GetEnergyBalance(energyBalanceModel);
        energyBalanceDataset.Label = "Wszyscy klienci";
        _config4.Data.Labels.AddRange(timeTrimmed);
        _config4.Data.Datasets.Add(energyBalanceDataset);

        var energyBalanceAfterEVDataset = getDatasetService.GetEnergyBalance(listOfEnergyBalanceAfterEVs, true);
        energyBalanceAfterEVDataset.Label = "Wszyscy klienci";

        _config5 = LineConfigPreparationEnergyBalance("Bilans Końcowy Energii z autami elektrycznych", "Dni", "kWh", Convert.ToInt32(energyBalanceDataset.Max()), Convert.ToInt32(energyBalanceDataset.Min()));
        _config5.Data.Labels.AddRange(timeTrimmed);
        _config5.Data.Datasets.Add(energyBalanceAfterEVDataset);
    }

    private void RedirectToUseOfEnergySite()
    {
        NavManager.NavigateTo("/useofenergy");
    }

    private void RedirectToEnergyProductionSite()
    {
        NavManager.NavigateTo("/ownenergyproduction");
    }

    private void RedirectToWindAndOthersEnergyProductionSite()
    {
        NavManager.NavigateTo("/energyproduction");
    }    

    private void RedirectToEnergyBalance()
    {
        NavManager.NavigateTo("/energybalance");
    }
    
    private void RedirectToEnergyBalanceEV()
    {
        NavManager.NavigateTo("/energybalanceev");
    }

    private void RandomizeData()
    {
        foreach (IDataset<int> dataset in _config.Data.Datasets)
        {
            int count = dataset.Count;
            dataset.Clear();
            dataset.AddRange(RandomScalingFactor(count));
        }

        _chart.Update();
    }


    private void AddDataset()
    {
        string color = ColorUtil.FromDrawingColor(ChartColors.All[_config.Data.Datasets.Count % ChartColors.All.Count]);
        IDataset<int> dataset = new LineDataset<int>(RandomScalingFactor(_config.Data.Labels.Count))
        {
            Label = $"Dataset {_config.Data.Datasets.Count}",
            BackgroundColor = color,
            BorderColor = color,
            Fill = FillingMode.Disabled
        };

        _config.Data.Datasets.Add(dataset);
        _chart.Update();
    }

    private void RemoveDataset()
    {
        IList<IDataset> datasets = _config.Data.Datasets;
        if (datasets.Count == 0)
            return;

        datasets.RemoveAt(datasets.Count - 1);
        _chart.Update();
    }

    private void AddData()
    {
        if (_config.Data.Datasets.Count == 0)
            return;

        string month = Months[_config.Data.Labels.Count % Months.Count];
        _config.Data.Labels.Add(month);

        foreach (IDataset<int> dataset in _config.Data.Datasets)
        {
            dataset.Add(RandomScalingFactor());
        }

        _chart.Update();
    }

    private void RemoveData()
    {
        if (_config.Data.Datasets.Count == 0 ||
            _config.Data.Labels.Count == 0)
        {
            return;
        }

        _config.Data.Labels.RemoveAt(_config.Data.Labels.Count - 1);

        foreach (IDataset<int> dataset in _config.Data.Datasets)
        {
            dataset.RemoveAt(dataset.Count - 1);
        }

        _chart.Update();
    }

    private void RandomizeDataBar()
    {
        foreach (IDataset<int> dataset in _config4.Data.Datasets)
        {
            int count = dataset.Count;
            dataset.Clear();
            for (int i = 0; i < count; i++)
            {
                if (_rng.NextDouble() < 0.2)
                {
                    dataset.Add(0);
                }
                else
                {
                    dataset.Add(RandomScalingFactor());
                }
            }
        }

        _chart4.Update();
    }

    private void AddDatasetBar()
    {
        Color color = ChartColors.All[_config4.Data.Datasets.Count % ChartColors.All.Count];
        IDataset<int> dataset = new BarDataset<int>(RandomScalingFactor(_config4.Data.Labels.Count))
        {
            Label = $"Dataset {_config4.Data.Datasets.Count}",
            BackgroundColor = ColorUtil.FromDrawingColor(Color.FromArgb(128, color)),
            BorderColor = ColorUtil.FromDrawingColor(color),
            BorderWidth = 1
        };

        _config4.Data.Datasets.Add(dataset);
        _chart4.Update();
    }

    private LineConfig LineConfigPreparation(string titleOfGraph, string xAxisName, string yAxisName)
    {
        var newConfig = new LineConfig
        {
            Options = new LineOptions
            {
                Responsive = true,
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = $"{titleOfGraph}"
                },
                Tooltips = new Tooltips
                {
                    Mode = InteractionMode.Nearest,
                    Intersect = true
                },
                Hover = new Hover
                {
                    Mode = InteractionMode.Nearest,
                    Intersect = true
                },
                Scales = new Scales
                {
                    XAxes = new List<CartesianAxis>
                    {
                        new CategoryAxis
                        {
                            ScaleLabel = new ScaleLabel
                            {
                                Display = true,
                                LabelString = $"{xAxisName}"
                            }
                        }
                    },
                    YAxes = new List<CartesianAxis>
                    {
                        new LinearCartesianAxis
                        {
                            ScaleLabel = new ScaleLabel
                            {
                                Display = true,
                                LabelString = $"{yAxisName}"
                            }
                        }
                    }
                }
            }
        };
        return newConfig;
    }

    private LineConfig LineConfigPreparationEnergyBalance(string titleOfGraph, string xAxisName, string yAxisName, int suggestedMaxYAxisValue = 150, int suggestedMinYAxisValue = -150)
    {
        var newConfig = new LineConfig
            {
                Options = new LineOptions
                {
                    Responsive = true,
                    Title = new OptionsTitle
                    {
                        Display = true,
                        Text = $"{titleOfGraph}"
                    },
                    Tooltips = new Tooltips
                    {
                        Mode = InteractionMode.Nearest,
                        Intersect = true
                    },
                    Hover = new Hover
                    {
                        Mode = InteractionMode.Nearest,
                        Intersect = true
                    },
                    Scales = new Scales
                    {
                        XAxes = new List<CartesianAxis>
                        {
                            new CategoryAxis
                            {
                                ScaleLabel = new ScaleLabel
                                {
                                    Display = true,
                                    LabelString = $"{xAxisName}"
                                }
                            }
                        },
                        YAxes = new List<CartesianAxis>
                    {
                        new LinearCartesianAxis
                        {
                            Ticks = new LinearCartesianTicks
                            {
                                SuggestedMax = suggestedMaxYAxisValue,
                                SuggestedMin = suggestedMinYAxisValue
                            },
                            ScaleLabel = new ScaleLabel
                            {
                                Display = true,
                                LabelString = $"{yAxisName}",

                            }
                        }

                    }
                }
            }
        };
        return newConfig;
    }
}