@page "/useofenergy"
@using ChartJs.Blazor.LineChart
@using ChartJs.Blazor.BarChart
@using System.Drawing
@inject AppState AppState

<PageTitle>Zaaktualizuj zużycie energii</PageTitle>
<div class="d-flex justify-content-center"><h1>Szczegółowe dane dotyczące zużycia energii elektrycznej</h1></div>
    <div class="col-sm">
     <label for="applyCalendarStart">Wybierz dzień który chcesz zobaczyć na wykresie</label>
    <input @bind-value=NewValueStart type="date" class="form-control" id="applyCalendarStart" aria-describedby="applyCalendarStart" placeholder="">
    <button @onclick=GetValuet>Aktualizuj wykres</button>
    <button @onclick=GetValueSum>Aktualizuj z sumowanymi wartościami</button>
    </div>
    <div class="col-sm justify-content-center">
    <Chart Config="_config" @ref="_chart"></Chart>
    </div>

@code {
    private DateTime CurrentValueStart { get; set; }
    private DateTime CurrentValueEnd { get; set; }
    public List<UserUsageModel> userUsageModel = new List<UserUsageModel>();
    private DateTime NewValueStart { get; set; }
    private DateTime NewValueEnd { get; set; }

    ImportCSVService importCSVService = new ImportCSVService();
    GetDatasetService getDatasetService = new GetDatasetService();
    private LineConfig _config;
    private Chart _chart;
    List<string> ppes = new List<string>();
    List<string> time = new List<string>();
    double maxValue = 1;
    double maxValue2 = 0;

    private void GetValuet()
    {
        maxValue = 1;
        CurrentValueStart = NewValueStart;
        CurrentValueEnd =  NewValueStart.AddDays(1);

        _config.Data.Datasets.Clear();
        _config.Data.Labels.Clear();

        ppes = getDatasetService.GetAllClients(userUsageModel);
        time = getDatasetService.GetAxisX(userUsageModel, ppes[0], CurrentValueStart, CurrentValueEnd);
        foreach (string client in ppes)
        {
            LineDataset<double> dataset = new LineDataset<double>();
            dataset = getDatasetService.GetDataset(userUsageModel, client, CurrentValueStart, CurrentValueEnd);
            if (dataset.Count > 1)
            {
                if (maxValue > maxValue2)
                {
                    maxValue = dataset.Max() + 0.5;
                }
                dataset.Label = client;
                _config.Data.Datasets.Add(dataset);
                maxValue2 = maxValue;
            }
        }
        _config.Data.Labels.AddRange(time);
    }

     private void GetValueSum()
    {
        maxValue = 1;
        CurrentValueStart = NewValueStart;
        CurrentValueEnd =  NewValueStart.AddDays(1);

        _config.Data.Datasets.Clear();
        _config.Data.Labels.Clear();

        List<String> datasets = new List<String>();

        foreach (string client in ppes)
        {
            var datasetToCount = getDatasetService.GetDataset(userUsageModel, client);
            datasets.Add(client);
        }

        ppes = getDatasetService.GetAllClients(userUsageModel);
        time = getDatasetService.GetAxisX(userUsageModel, ppes[0], CurrentValueStart, CurrentValueEnd);
            LineDataset<double> dataset = new LineDataset<double>();
            dataset = getDatasetService.GetAllDataset(userUsageModel, CurrentValueStart, CurrentValueEnd);
            if (dataset.Count > 1)
            {

                maxValue = Math.Round(dataset.Max());
                dataset.Label = "Wszyscy klienci";
                _config.Options.Scales.YAxes = new List<CartesianAxis>
                                            {
                                                    new LinearCartesianAxis
                                                    {
                                                        ScaleLabel = new ScaleLabel
                                                        {
                                                            LabelString = "Time"
                                                        },
                                                        GridLines = new GridLines
                                                        {
                                                            Display = false
                                                        },
                                                        Ticks = new LinearCartesianTicks
                                                        {
                                                            Min = 0,
                                                            Max = maxValue
                                                        }
                                                    }
                                                };
                _config.Data.Datasets.Add(dataset);
                maxValue2 = maxValue;
        }
        _config.Data.Labels.AddRange(time);
    }

     protected override void OnInitialized()
     {
           userUsageModel = importCSVService.ReturnListDetailed(AppState.UsageOfEnergyList);
                _config = new LineConfig
                    {
                        Options = new LineOptions
                        {
                            Responsive = true,
                            Title = new OptionsTitle
                            {
                                Display = true,
                                Text = "Zużycie energii elektrycznej"
                            },
                            Tooltips = new Tooltips
                            {
                                Mode = InteractionMode.Nearest,
                                Intersect = true
                            },
                            Hover = new Hover
                            {
                                Mode = InteractionMode.Nearest,
                                Intersect = true
                            },
                            Scales = new Scales
                            {
                                XAxes = new List<CartesianAxis>
                                {
                                    new CategoryAxis
                                    {
                                        ScaleLabel = new ScaleLabel
                                        {
                                            Display = true,
                                            LabelString = "Godziny"
                                        }
                                    }
                                },
                                YAxes = new List<CartesianAxis>
                                {
                                    new LinearCartesianAxis
                                    {
                                        ScaleLabel = new ScaleLabel
                                        {
                                            Display = true,
                                            LabelString = "kWh"
                                        }
                                    }
                                }
                            }
                        }
                    };
    }
}
